package fi.ak.dungeongen.levelgenerator;

import fi.ak.dungeongen.logic.Location;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

public class TunnelCarverTest {

    private static final int tunnelLengthVertical = 7;
    private static final int tunnelLengthHorizontal = 25;

    public TunnelCarverTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    private char[][] testLevel() {
        return new char[][]{
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}};
    }

    @Test
    public void carveUp() {
        TunnelCarver carver = new TunnelCarver(tunnelLengthVertical, tunnelLengthHorizontal);

        char[][] level = testLevel();

        carver.startCarve(level, new Location(10, 2));

        char[][] correct = new char[][]{
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '#', '.', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '.', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '.', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '.', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}};

        assertArrayEquals(correct, level);
    }

    @Test
    public void carveRight() {
        TunnelCarver carver = new TunnelCarver(tunnelLengthVertical, tunnelLengthHorizontal);

        char[][] level = testLevel();

        carver.startCarve(level, new Location(5, 3));

        char[][] correct = new char[][]{
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}};

        assertArrayEquals(correct, level);
    }

    @Test
    public void carveLeft() {
        TunnelCarver carver = new TunnelCarver(tunnelLengthVertical, tunnelLengthHorizontal);

        char[][] level = testLevel();

        carver.startCarve(level, new Location(11, 7));

        char[][] correct = new char[][]{
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}};

        assertArrayEquals(correct, level);
    }

    @Test
    public void carveDown() {
        TunnelCarver carver = new TunnelCarver(tunnelLengthVertical, tunnelLengthHorizontal);

        char[][] level = testLevel();

        carver.startCarve(level, new Location(5, 2));

        char[][] correct = new char[][]{
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '#', '.', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '.', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '.', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '.', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '.', '.', '.', '#', '#', '#', '.', '.', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
            {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}};

        assertArrayEquals(correct, level);
    }
}
